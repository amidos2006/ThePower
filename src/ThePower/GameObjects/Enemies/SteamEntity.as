package ThePower.GameObjects.Enemies 
{
	import net.flashpunk.Entity;
	import net.flashpunk.FP;
	import net.flashpunk.graphics.Spritemap;
	import net.flashpunk.Sfx;
	import net.flashpunk.Tween;
	import net.flashpunk.tweens.misc.Alarm;
	import ThePower.CollisionNames;
	import ThePower.GlobalGameData;
	/**
	 * ...
	 * @author Amidos
	 */
	public class SteamEntity extends Entity
	{
		[Embed(source = '../../../../assets/Graphics/sprites/enemies/cave/steam_hole.png')]private var steamHoleGraphics:Class;
		[Embed(source = '../../../../assets/Graphics/sprites/weapons/missile_trail_strip5.png')]private var steamParticle:Class;
		[Embed(source = '../../../../assets/Sounds/enemies/steam.mp3')]private var steamSound:Class;
		
		private var steamSfx:Sfx = new Sfx(steamSound);
		
		private const image:String = "Image";
		private const steamDamage:Number = 10;
		
		private var spriteMap:Spritemap = new Spritemap(steamHoleGraphics, 32, 32);
		private var steamTimerStop:Alarm;
		private var steamTimerStart:Alarm;
		private var steamGeneratorAlarm:Alarm = new Alarm(2, GenerateSteam, Tween.LOOPING);
		private var steamStatus:Boolean = false;
		private var isFirstClass:Boolean = false;
		
		public function SteamEntity(xIn:Number, yIn:Number, layerConstant:Number) 
		{
			spriteMap.add(image, [0], 1);
			graphic = spriteMap;
			
			x = xIn;
			y = yIn;
			layer = layerConstant;
			
			setHitbox(spriteMap.width, spriteMap.height, spriteMap.originX, spriteMap.originY);
			
			steamSfx.volume = 0.1;
			
			steamTimerStop = new Alarm(steamSfx.length * FP.frameRate, StopSteam, Tween.PERSIST);
			steamTimerStart = new Alarm((1.5 + FP.random)  * steamSfx.length * FP.frameRate, StartSteam, Tween.PERSIST);
			addTween(steamTimerStop, false);
			addTween(steamTimerStart, true);
			addTween(steamGeneratorAlarm, true);
		}
		
		private function StopSteam():void
		{
			steamStatus = false;
			
			steamTimerStart.start();
		}
		
		private function StartSteam():void
		{
			if (!steamSfx.playing)
			{
				steamSfx.play(0.1);
			}
			
			steamStatus = true;
			
			steamTimerStop.start();
		}
		
		private function GenerateSteam():void
		{
			if (steamStatus)
			{
				var direction:Number = 90 + (FP.random - 0.5) * 40;
				var speed:Number = 1.5 + FP.random * 0.5;
				FP.world.add(new AnimatedMovingParticleEntity(steamParticle, 7, 7, [0], direction, speed, x + spriteMap.width / 2, y + spriteMap.height/2 + 5, 1, layer));
			}
		}
		
		override public function removed():void 
		{
			steamSfx.stop();
			//TODO: remove the particles of generated by the steamhole
			
			super.removed();
		}
		
		override public function update():void 
		{
			if (GlobalGameData.pauseGame)
			{
				return;
			}
			
			super.update();
			
			if (steamStatus)
			{
				if (GlobalGameData.suitPower < 1 && collide(CollisionNames.PlayerCollisionName,x,y))
				{
					GlobalGameData.playerEntity.HitPlayer(steamDamage);
				}
			}
			
			spriteMap.play(image);
		}
		
	}

}